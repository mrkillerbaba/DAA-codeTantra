#include <stdio.h>
// Function to solve the unbounded knapsack problem
int unboundedKnapsack(int W, int wt[], int val[], int N) {
    int dp[W + 1];
    // Initialize the dp array with 0
    for (int i = 0; i <= W; i++) {
        dp[i] = 0;
	}
    // Build the dp array
    for (int i = 0; i <= W; i++) {
        for (int j = 0; j < N; j++) {
            // If the weight of the item is less than or equal to the current capacity
            if (wt[j] <= i) {
                dp[i] = (dp[i] > dp[i - wt[j]] + val[j]) ? dp[i] : (dp[i - wt[j]] + val[j]);
            }
        }
	}
    return dp[W]; // The maximum profit for weight W
}
int main() {
    int N, W;
    // Input size of arrays
    scanf("%d", &N);
    // Input the weight and value arrays
    int wt[N], val[N];
    for (int i = 0; i < N; i++) {
        scanf("%d", &wt[i]);
	}
    for (int i = 0; i < N; i++) {
        scanf("%d", &val[i]);
	}
    // Input the weight limit
    scanf("%d", &W);
    // Calculate and output the maximum profit
    int maxProfit = unboundedKnapsack(W, wt, val, N);
    printf("%d", maxProfit);
    return 0;
}
